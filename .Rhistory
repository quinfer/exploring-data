data(package='tsfe')
glen <- tq_get("GLEN.L")
#| include: false
library(tidyverse)
library(tidyquant)
library(fpp2)
library(DT)
x <- c(123,39,78,52,110)
yr <- 2012:2016
knitr::kable(data.frame(Year=yr,Observation=x), booktabs=TRUE)
#| echo: true
MyDeleteItems<-ls()
rm(list=MyDeleteItems)
# Good practice to clear all objects before loading data
library(tsfe) # includes class datasets
print(data(package='tsfe'))
#| echo: true
#| eval: true
ftse<-tq_get("^FTSE",from="2016-01-01")
ftse_m<-tq_transmute(ftse,
select = adjusted,
mutate_fun = to.monthly)
ftse_m_ts<-ts(ftse_m$adjusted, start=c(2016,1), freq=12)
autoplot(tsfe::ftse_m_ts) + theme_tq()
#|echo: true
tsfe::ni_hsales %>% datatable()
tsfe::usuk_rate %>%  # Data
ggplot(aes(x=date, y=price )) + # Coordinate system
geom_line(colour="pink") # geom
#| label: normalplot
#| echo: true
#| fig.height: 2
#| fig.align: "center"
require(grDevices)
require(graphics)
ggplot(data = data.frame(x = c(-3, 3)), aes(x)) +
stat_function(fun = dnorm,
n = 101,
args = list(mean = 0, sd =1)
,lwd=1,colour="red") +
ylab("") +
scale_y_continuous(breaks = NULL) +
labs(title=expression(y[it] %~% N(0,1)),
x=expression(y[it])) +
theme(plot.title = element_text(hjust = 0.5,size=8))
#|label: customfunction
#| echo: true
path_sim <- function(){
days <- 200
changes <- rnorm(200,mean=1.001,sd=0.005)
sample.path <- cumprod(c(40,changes))
closing.price <- sample.path[days+1] #+1 because we add the opening price
return(closing.price)
}
number_of_possible_futures=10000
mc.closing <- replicate(number_of_possible_futures,path_sim())
cat("median = ",median(mc.closing),
"mad sd = ",mad(mc.closing),
"mean = ",mean(mc.closing),
"sd = ",sd(mc.closing))
#| echo: true
#| eval: true
glen <- tq_get("GLEN.L")
glen_m <- tq_transmute(glen,
select = adjusted,
mutate_fun = monthlyReturn,
type="log",
col_rename = "log_return")
glen_m_ts <- ts(glen_m$log_return,
frequency=12,start=c(2011,5))
glen <- tq_get("GLEN.L")
glen_m <- glen %>%
tq_transmute(select = adjusted,
mutate_fun = monthlyReturn,
type="log",
col_rename = "log_return")
glen_m_ts <- glen_m$log_return %>%
ts(frequency=12,start=c(2011,5))
glen_m %>%
ggplot(aes(x=log_return)) +
geom_density() +
stat_function(
fun=dnorm,
args=list(mean(glen_m$log_return),
sd=sd(glen_m$log_return)),
col="red")
wnacf <- matrix(acf(c(wn), lag.max=10,
plot=FALSE)$acf[-1,,1], nrow=1)
colnames(wnacf) <- paste("$r_{",1:10,"}$",sep="")
knitr::kable(wnacf, booktabs=TRUE,
align="c", digits=3,
format.args=list(nsmall=3))
#| echo: true
library(quantmod)
getSymbols("AAPL", from = "2015-01-01", to = "2020-12-31")
getSymbols("AAPL", from = "2015-01-01", to = "2020-12-31")
aapl_prices <- Cl(AAPL)
sma_20 <- SMA(aapl_prices, n = 20)
plot(aapl_prices, main = "Apple Inc. (AAPL) Stock Prices with SMA", ylab = "Closing Price")
lines(sma_20, col = "red")
#| echo: true
ema_20 <- EMA(aapl_prices, n = 20)
plot(aapl_prices, main = "Apple Inc. (AAPL) Stock Prices with EMA", ylab = "Closing Price")
lines(ema_20, col = "blue")
#| echo: true
wma_custom <- WMA(aapl_prices, n = 5, wts = c(0.1, 0.2, 0.3, 0.2, 0.2))
plot(aapl_prices, main = "Apple Inc. (AAPL) Stock Prices with WMA", ylab = "Closing Price")
lines(wma_custom, col = "green")
#| echo: true
library(signal)
sg_filter <- sgolayfilt(aapl_prices, p = 3, n = 21)
plot(aapl_prices, main = "Apple Inc. (AAPL) Stock Prices with Savitzky-Golay Filter", ylab = "Closing Price")
lines(sg_filter, col = "purple")
#| echo: true
lowess_smooth <- lowess(aapl_prices)
plot(aapl_prices, main = "Apple Inc. (AAPL) Stock Prices with Lowess Smoothing", ylab = "Closing Price")
lines(lowess_smooth$y, col = "orange")
#| echo: true
library(dlm)
model <- dlmModPoly(order = 2)
model$V <- diag(exp(0.5), 2)
model$W <- exp(-1)
kalman_filter <- dlmSmooth(model, aapl_prices)
# Load required packages
library(quantmod)
library(TTR)
library(ggplot2)
library(dlm)
library(signal)
library(stats)
# Retrieve historical stock data for Apple Inc. (AAPL)
getSymbols("AAPL", from = "2015-01-01", to = "2020-12-31")
# Extract the adjusted closing prices
aapl_prices <- Cl(AAPL)
#| echo: true
# Simple Moving Average (SMA)
sma_20 <- SMA(aapl_prices, n = 20)
# Plot SMA
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(sma_20), y = as.numeric(sma_20)), color = "red") +
labs(title = "Simple Moving Average (SMA)",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "red"), labels = c("Price", "SMA")) +
theme_minimal()
#| echo: true
# Exponential Moving Average (EMA)
ema_20 <- EMA(aapl_prices, n = 20)
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(ema_20), y = as.numeric(ema_20)), color = "blue") +
labs(title = "Exponential Moving Average (EMA)",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "blue"), labels = c("Price", "EMA")) +
theme_minimal()
#| echo: true
wma_custom <- WMA(aapl_prices, n = 5, wts = c(0.1, 0.2, 0.3, 0.2, 0.2))
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(wma_custom), y = as.numeric(wma_custom)), color = "green") +
labs(title = "Weighted Moving Average (WMA)",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "green"), labels = c("Price", "WMA")) +
theme_minimal()
#| echo: true
# Lowess Smoothing
lowess_smooth <- lowess(aapl_prices)
# Plot Lowess Smoothing
ggplot() +
geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = "black") +
geom_line(aes(x = index(aapl_prices), y = as.numeric(lowess_smooth$y)), color = "orange") +
labs(title = "Lowess Smoothing",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("black", "orange"), labels = c("Price", "Lowess")) +
theme_minimal()
#| echo: true
# Apply the Kalman filter
s <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))
# Create a data frame for plotting
data_df <- data.frame(Date = index(aapl_prices),
Price = as.numeric(aapl_prices),
Kalman = as.numeric(dropFirst(s$s)))
# Plot the results using ggplot
data_df |>
ggplot(aes(x = Date)) +
geom_line(aes(y = Price, color = "Price")) +
geom_line(aes(y = Kalman, color = "Kalman")) +
labs(title = "Apple Inc. (AAPL) Stock Prices",
x = "Time",
y = "Adjusted Close") +
scale_color_manual(name = "Series", values = c("Price" = "black", "Kalman" = "blue")) +
theme_minimal()
shapiro.test(glen_m$log_return)
Box.test(glen_m$log_return, type="Ljung-Box")
Box.test(glen_m$log_return,lag = 5, type="Ljung-Box")
