{
  "hash": "235b9e52a221fab6b38019045d6a6b2b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring Data, Normality, and Smoothing\" \nauthor: \"Barry Quinn <br> Digital Dave\"\nfooter: \"Advanced Financial Data Analytics\"\ncss: mycssblend.css\nlogo: qbslogo.png\ntitle-slide-attributes:\n  data-background-image: title-slide.png\n  data-background-size: cover\n  data-background-opacity: \"0.5\"\nembed-resources: true\nformat: \n  revealjs:\n    slide-number: c/t\n    scrollable: true\nexecute:\n  echo: true\n---\n\n\n\n\n# Exploring Data\n\n## Outline\n\n- package `tsfe` and class datasets\n- `ts` objects and `ts` function\n- Visual trends and patterns\n- Distributions properties of asset returns\n- Time series decomposition\n\n## Rethinking visualisation\n  - Charts are not meant to be *seen*, they are intended to be *read*\n  - They are not just images but **visual arguments**.\n  - Data doesn't *speak for itself*.\n  - Data visualisations need to be **shown** and **explained**\n\n## `ts` objects and `ts` function\n\nA time series is stored in a `ts` object in R:\n\n - a list of numbers\n - information about times those numbers were recorded.\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(123,39,78,52,110)\nyr <- 2012:2016\nknitr::kable(data.frame(Year=yr,Observation=x), booktabs=TRUE)\n```\n\n::: {.cell-output-display}\n\n\n| Year| Observation|\n|----:|-----------:|\n| 2012|         123|\n| 2013|          39|\n| 2014|          78|\n| 2015|          52|\n| 2016|         110|\n\n\n:::\n:::\n\n\n## `ts` objects and `ts` function {.small}\n\n::: columns\n::: column\nFor observations that are more frequent than once per year, add a `frequency` argument.\n\nE.g., monthly data stored as a numerical vector `z`:\n\n```r\ny <- ts(z, frequency=12, start=c(2003, 1))\n```\n:::\n::: column\n\n`ts(data, frequency, start)`\n\n#### Type of data \n\n|frequency|start|example|\n|:--:|:--:|:--:|\n|Annual|1 |1995|\n|Quarterly|4|`c(1995,2)`|\n|Monthly|12|`c(1995,9)`|\n|Daily|7 or 365.25|  1 or c(1995,234)|\n|Weekly| 52.18| c(1995,23)|\n|Hourly|24 or 168 or 8,766  | 1|\n|Half-hourly|48 or 336 or 17,532 | 1|\n:::\n:::\n\n\n## Class package (pre-loaded in Q-RaP) {.small}\n\n::: columns\n::: column\n\n`library(tidyverse); library(tidyquant); library(DT)`\n\n`DT` loads **datatable** interactive table visualisation\n\n`tidyquant` loads:\n\n* **tq_transmute** function (for transforming between time frequencies)\n* **tq_mutate** function (create return series)\n\n`tidyverse` loads many packages include:\n\n* **ggplot** plotting package\n* **dplyr** data wrangling package\n:::\n::: column\n```\nlibrary(fpp2)\n```\nThis loads:\n\n* **forecast** package (for forecasting functions)\n* **fma** package (for lots of time series data)\n* **expsmooth** package (for more time series data)\n\n:::\n:::\n\n## Some class data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMyDeleteItems<-ls() \nrm(list=MyDeleteItems) \n# Good practice to clear all objects before loading data\nlibrary(tsfe) # includes class datasets\nprint(data(package='tsfe'))\n```\n:::\n\n\n\n## Programmatically accessing data from the \n::: columns\n::: column\n* Download data using `tg_get` \n* Create a monthly series using `tq_transmute`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nftse<-tq_get(\"^FTSE\",from=\"2016-01-01\")\nftse_m<-tq_transmute(ftse,\n                     select = adjusted,\n                     mutate_fun = to.monthly)\nftse_m_ts<-ts(ftse_m$adjusted, start=c(2016,1), freq=12)\n```\n:::\n\n:::\n::: column\n- `ts` object has plotting functionality.\n- Quick visualisation of financial time trends in monthly ftse 100 index price\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(tsfe::ftse_m_ts) + theme_tq()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Is a table a good visualisation?\n\n- Quarterly earnings per share data for carnival PLC.\n\n- Using `DT` to create an interactive table\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n\ntsfe::ni_hsales %>% datatable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-030004e00ef259691646\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-030004e00ef259691646\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\"],[\"Q1 2005\",\"Q2 2005\",\"Q3 2005\",\"Q4 2005\",\"Q1 2006\",\"Q2 2006\",\"Q3 2006\",\"Q4 2006\",\"Q1 2007\",\"Q2 2007\",\"Q3 2007\",\"Q4 2007\",\"Q1 2008\",\"Q2 2008\",\"Q3 2008\",\"Q4 2008\",\"Q1 2009\",\"Q2 2009\",\"Q3 2009\",\"Q4 2009\",\"Q1 2010\",\"Q2 2010\",\"Q3 2010\",\"Q4 2010\",\"Q1 2011\",\"Q2 2011\",\"Q3 2011\",\"Q4 2011\",\"Q1 2012\",\"Q2 2012\",\"Q3 2012\",\"Q4 2012\",\"Q1 2013\",\"Q2 2013\",\"Q3 2013\",\"Q4 2013\",\"Q1 2014\",\"Q2 2014\",\"Q3 2014\",\"Q4 2014\",\"Q1 2015\",\"Q2 2015\",\"Q3 2015\",\"Q4 2015\",\"Q1 2016\",\"Q2 2016\",\"Q3 2016\",\"Q4 2016\",\"Q1 2017\",\"Q2 2017\",\"Q3 2017\",\"Q4 2017\",\"Q1 2018\",\"Q2 2018\",\"Q3 2018\",\"Q4 2018\",\"Q1 2019\",\"Q2 2019\",\"Q3 2019\",\"Q4 2019\",\"Q1 2020\",\"Q2 2020\",\"Q3 2020\",\"Q4 2020\"],[772,2051,2106,2472,2194,2742,2828,2880,2214,2380,1819,1228,815,982,647,633,580,755,851,984,657,721,823,765,626,677,829,824,819,791,952,1018,919,998,1123,1384,1270,1432,1510,1651,1322,1500,1640,1780,1734,1416,1767,1827,1508,1753,1856,2021,1642,1792,1994,2085,1570,1877,2023,1996,1581,626,1526,2272],[2164,5922,6337,7152,6393,8076,8016,7949,6476,6941,4945,3050,2187,2333,1606,1617,1416,2072,2384,2601,1847,1975,1883,2049,1775,1943,2379,2254,2356,2336,2606,2753,2519,2877,3089,3673,3362,3832,3976,4201,3294,3789,4199,4396,4421,3465,4205,4256,3700,4370,4689,4777,3832,4406,4575,4689,3614,4323,4746,4761,3706,1304,3467,5129],[2936,7973,8443,9624,8587,10818,10844,10829,8690,9321,6764,4278,3002,3315,2253,2250,1996,2827,3235,3585,2504,2696,2706,2814,2401,2620,3208,3078,3175,3127,3558,3771,3438,3875,4212,5057,4632,5264,5486,5852,4616,5289,5839,6176,6155,4881,5972,6083,5208,6123,6545,6798,5474,6198,6569,6774,5184,6200,6769,6757,5287,1930,4993,7401]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Quarter Year<\\/th>\\n      <th>Rural<\\/th>\\n      <th>Urban<\\/th>\\n      <th>Total Verified Sales<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,4]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Quarter Year\",\"targets\":1},{\"name\":\"Rural\",\"targets\":2},{\"name\":\"Urban\",\"targets\":3},{\"name\":\"Total Verified Sales\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## Rethinking visualisation using `ggplot2` {.small}\n\n::: columns\n::: column\n* `ggplot2` is based on [The Grammar of Graphics](http://amzn.to/2ef1eWp), the idea that you can build every graph from the same\ncomponents: a data set, a coordinate system, and geoms—visual marks that represent data points.\n\n:::\n::: column\n#### Example: Exchange rate time series\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsfe::usuk_rate %>%  # Data\n  ggplot(aes(x=date, y=price )) + # Coordinate system\n  geom_line(colour=\"pink\") # geom\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Your turn\n\n* Use `tq_get` to download the CBOE VIX Index from `2016-01-01` using the symbol `^VIX`\n* create a time series object using the VIX index price.\n* Plot this daily VIX Index Price using `autoplot`.\n\n**Hint:** the ts object of daily financial time series does not have a regular frequency to input into `ts()` function, so leave this argument blank.\n\n\n# Distributions properties of asset returns\n\n## Why normal? {.small}\n\n* This is a plot of a normal distribution with mean equal to zero and variance equal to one.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequire(grDevices) \nrequire(graphics)\nggplot(data = data.frame(x = c(-3, 3)), aes(x)) +\n  stat_function(fun = dnorm, \n                n = 101, \n                args = list(mean = 0, sd =1)\n                ,lwd=1,colour=\"red\") + \n  ylab(\"\") +\n  scale_y_continuous(breaks = NULL) +\n  labs(title=expression(y[it] %~% N(0,1)),\n       x=expression(y[it])) +\n  theme(plot.title = element_text(hjust = 0.5,size=8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/normalplot-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Why normal?\n\n* Named after Carolo Friderico Gavss, the normal (or Gaussian) distribution is the most common used distributional assumption in statistical analysis.\n\nThis is because:\n\n* Easy to calculate with\n* Common in nature\n* Very conservative assumptions\n\n# Importance of simulation\n\n## `the importance of simulation` {.small}\n\n- Simulation of random variables is important in applied statistics for several reasons. \n- First, we use probability models to mimic variation in the world, and the tools of simulation can help us better\nunderstand how this variation plays out.\n\n>Patterns of randomness are notoriously contrary to normal human thinking—our brains don’t seem to be able to do a good job understanding that random swings will be present in the short term but average out in the long run—and in many cases simulation is a big help in training our intuitions about averages and variation. (Gelman et al. 2021)\n\n\n## `the importance of simulation`\n\n\n- .Second, we can use simulation to approximate the sampling distribution of data and propagate this to the sampling distribution of statistical estimates and procedures. \n\n- Third, regression models are not deterministic; they produce probabilistic predictions. \n\n## `the importance of simulation`\n\n- Simulation is the most convenient and general way to represent uncertainties in forecasts. \n\nThroughout this course and in our practice, we use simulation for all these reasons; \n\n- In this lecture we introduce the basic ideas and the tools required to perform simulations in R.\n]\n\n##\n:::{.discussion}\n* Suppose your company is being IPO'd at a starting price of £40.\n\n* You want to know the future price of the stock in 200 days.\n\n* You have been told Monte Carlo simulation can help predict stock market futures\n\n* Can you create a number of possible future price paths and find average price in 200 days?\n\n* How many futures should you create? \n\n* What assumptions should we make about these futures?\n:::\n\n\n## Monte Carlo Simulation\n- The coding for simulation becomes cleaner if we express the steps for a single simulation in an R function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|label: customfunction\n#| echo: true\npath_sim <- function(){\n  days <- 200\n  changes <- rnorm(200,mean=1.001,sd=0.005)\n  sample.path <- cumprod(c(40,changes))\n  closing.price <- sample.path[days+1] #+1 because we add the opening price\n  return(closing.price)\n}\n```\n:::\n\n\n\n## `replicate` function\n- For simplicity I have *hard-coded* one sample path of our IPO closing price in the previous function.\n- We can then use replicate function to call `path_sim` 10000 times\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber_of_possible_futures=10000\nmc.closing <- replicate(number_of_possible_futures,path_sim())\n```\n:::\n\n\n## Summarising simulations\n\n- Simulations are a versatile way to summarise a probability model, predictions from a fitted regression or uncertainty about parameters of a fitted model (*the probabilistic equivalent of estimates and standard errors*)\n- One useful way to summarise the *location* of the distribution is to use the `median` function in the variation in the distribution is the *median absolute deviation standard deviation (mad sd)*.\n\n## Median statistics\n\nWe typically prefer median-based summaries because they are more computationally stable, and we rescale the median-based summary of variation as described above so as to be comparable to the standard deviation, which we already know how to interpret in usual statistical practice.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"median = \",median(mc.closing),\n    \"mad sd = \",mad(mc.closing),\n    \"mean = \",mean(mc.closing),\n    \"sd = \",sd(mc.closing))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nmedian =  48.72103 mad sd =  3.467481 mean =  48.82892 sd =  3.429184\n```\n\n\n:::\n:::\n\n\n\n## Why normal?\n\n### Practical reasons\n\n-  Processes that produce normal distributions include:\n-  **Addition** of many independent random variables\n- Lots of process are approximately normal\n- Product of small deviations\n- logarithms of products\n- Logarithms are just magnitudes\n\n\n## Ontological perspective of why normal {.small}\n\n::: columns\n::: column\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/XTsaZWzVJ4c\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n:::\n::: column\n\n* Processes which add fluctuations results in dampening\n* Damped fluctuations end up Gaussian\n* No information left, except mean and variance.\n* Can't infer process from distribution!  Most do some more science.\n:::\n:::\n\n## Epistemological perspective of why normal {.small}\n\n::: columns\n::: column\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lI9-YgSzsEQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n:::\n::: column\n\n* Know only *mean* and *variance*\n* Then least suprising and most conservative (*maximum entropy*) distribution is Gaussian.\n  * In terms of being conservative, it assumes the least; only the mean and variance. \n* Nature likes maximum entropy distributions.\n:::\n:::\n\n## Why normal asset returns?\n* Financial time series processes considered in this course:\n* Return series\n* Financial statement information\n* Volatility processes\n* Extreme events\n* Multivariate series\n\n## Why assume normal asset returns? {.small}\n* Normality assumption allows for asset returns properties to be tractable.\n* Tractable mean and variance\n  * They provide information about the long-term return and risk, respectively.\n* Tractable symmetrical properties\n  * Symmetry has important implications in holding short and long financial positions in risk management.\n* Tractable kurtosis properties \n  * Kurtosis is related to volatility forecasting, efficiency in estimation and tests,etc.\n\n## Simple model of asset returns\n\n* To engineer a statistical model of asset returns we need to make some assumptions about the data story or *data generating process*.\n\n$$ \\{R_{it}|i-1,\\dots N;t=1,\\dots,T\\} \\stackrel{i.i.d}\\sim N (m_1,m_2) $$\n\n* A traditional assumption in financial analysis is the simple returns are independently and identically distributed (iid) as normal with a fixed mean $m_1$ and variance $m_2$.\n\n\n## Why normal asset returns?\n\n* The previous assumption is unrealistic in a number of ways:\n1. The lower bound of a simple return is -1, but a normal distribution has no lower bound.\n2. Multiperiod simple returns $R_it[k]$ is not normally distributed as it is the *product* of one-period returns.\n3. Empirically, asset returns tend  to have *heavy tails* or **positive excess kurtosis**\n]\n\n\n## Another model of asset returns\n\n$$ \\{r_{it}|i=1,\\dots N ;t=1,\\dots,T\\} \\stackrel{i.i.d}\\sim N (\\mu,\\sigma^2) $$\n\n* Another common assumption is that log returns are iid as normal with mean $\\mu$ and variance $\\sigma^2$.\n* As the sum of a finite number of iid random variables is normal, $r_t[k]$ is also normally distributed.\n* There is also no lower bound for $r_t$\n* However, lognormal assumption is not consistent with **positive excess kurtosis**.\n\n\n\n## Are stock returns distributed normally? {.small}\n\n* The following code loads Glencore Plc asset prices from yahoo finance, converts daily adjusted prices to monthly log returns, and creates a monthly time series object.\n\n::: columns\n::: column\n### Ugly code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglen <- tq_get(\"GLEN.L\")\nglen_m <- tq_transmute(glen,\n                       select = adjusted,\n                       mutate_fun = monthlyReturn,\n                       type=\"log\",\n                       col_rename = \"log_return\")\nglen_m_ts <- ts(glen_m$log_return,\n                frequency=12,start=c(2011,5))\n```\n:::\n\n\n:::\n::: column\n### Piping (%>%) code is more readable?\n- `literate programming`\n\n::: {.cell}\n\n```{.r .cell-code}\nglen <- tq_get(\"GLEN.L\")\nglen_m <- glen %>%\n  tq_transmute(select = adjusted,\n               mutate_fun = monthlyReturn,\n               type=\"log\",\n               col_rename = \"log_return\")\nglen_m_ts <- glen_m$log_return %>%\n  ts(frequency=12,start=c(2011,5))\n```\n:::\n\n:::\n:::\n\n## Are stock returns distributed normally?\n\n**Visual Arguments**\n\n* We can use `ggplot` to visualise the empirical distribution, superimposing what the returns would look like if they were normally distributed.\n\n  * **Only two parameters (a mean and a variance) are required to create a hypothetical normal distribution of a returns series**\n\n## ggplot code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglen_m %>% \n  ggplot(aes(x=log_return)) +\n  geom_density() +\n  stat_function(\n    fun=dnorm,\n    args=list(mean(glen_m$log_return),\n              sd=sd(glen_m$log_return)),\n    col=\"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n\n## Inference from the plot\n\n* **What patterns are revealed?**\n* The normal distribution is superimposed over the histogram of the daily equity returns.\n* Compared to the normal the distribution of the returns has longer tails and a higher central peak.\n* In statistical terms we say the distribution is leptokurtic, or fat-tailed.\n\n\n## Are stock returns distributed normally? {.small}\n\n##### Quantile-quantile plot\n* A quantile-quantile plot is a graphical tool to compare two distributions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglen_m %>%\n  ggplot(aes(sample=100*log_return)) +\n  stat_qq(distribution = stats::qnorm) +\n  stat_qq_line(distribution = stats::qnorm,\n               colour=\"red\") +\n  labs(title = \"Quantile-quantile plot of glencore stock returns\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Inference from plot\n* This plot compares the quantiles of a normal distribution (thinner straight line) to the quantiles of the data (thicker scatter plot).\n* If the plots exactly overlap then the data is probably normally distributed.\n* While the returns and the normal distribution are similar between +12.5% and -12.5%, outside these limits the returns behave non-normally.\n\n\n## Should we care if asset returns are normal distributed variables?\n\n- In regressions the assumption of normality of model errors is one of the least important\n- For the purpose of estimating the regression line it is barely important at all\n- Diagnostics of normality of errors is not recommended unless the model is being used to predict individual data points.\n\n\n## Is normality of errors important? {.small}\n\n- If the distribution of errors is of interest, perhaps because of predictive goals, this should be distinguished from the distribution of the data, $y$.\n- **A regression model does not assume or require that predictors are normally distributed**\n- Furthermore, the normal distribution on the outcome refers to the regression errors, not the raw data.\n- Depending on the structure of the predictors, it is possible for data $y$ to be far from normally distributed even when coming from a linear regression model.\n- See Gelman et al., (2020) Chapter 11 for more detail\n\n\n## Null hypothesis significant testing {.small}\n\n* Null hypothesis significance tests (NHST) are models.\n* We assume an underlying data story with distributional properties which then allows us to create p-values based on null hypothesis.\n* In practice they are often misused to create 'bright line' acceptance or rejection decision about underlying theoretical questions.\n* In applied statistics their misuse is well understood\n\n>Read Bailey, D. H. & Prado, M. L. de. Finance is Not Excused: Why Finance Should Not Flout Basic Principles of Statistics. Ssrn Electron J (2021) doi:10.2139/ssrn.gi3895330.\n\n## A NHST for normality {.small}\n\n* The Shapiro-Wilk test is a test of the null hypothesis that the data is normally distributed.\n* The test statistic is $W$ and the null hypothesis is that the data is normally distributed.\n* The test is sensitive to the tails of the distribution and is recommended for small samples.\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(glen_m$log_return)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  glen_m$log_return\nW = 0.9469, p-value = 0.0001053\n```\n\n\n:::\n:::\n\n\n## Lung-Box test {.small}\n\n- The Lung-Box test is a test of the null hypothesis that the data is independently and identically distributed.\n- The test statistic is $Q$ and the null hypothesis is that the data is independently and identically distributed.\n- The test is sensitive to the tails of the distribution and is recommended for small samples.\n\n::: {.cell}\n\n```{.r .cell-code}\nBox.test(glen_m$log_return,lag = 5, type=\"Ljung-Box\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tBox-Ljung test\n\ndata:  glen_m$log_return\nX-squared = 1.7688, df = 5, p-value = 0.8801\n```\n\n\n:::\n:::\n\n\n## Are stock returns distributed normally? {.small}\n\n### Statistical inference\n* Both test give different result!!  \n* Assuming the models underpinning the previous NHST are valid, we can reject the Null that Glencore monthly log returns are normally distributed at even the 1% significance level.\n\n### Practical inference\n  \n* Assuming normality to model the *middle* of the data is probably ok\n* Modelly extreme observations may need more distributional tools.\n\n\n## Heavy Tail Statistical Distributions \n\nStudent's t \n  : very similar to the normal but wider and lower.\n  \nStable \n  : generalisation of the normal, stable under addition thus can be used with log returns, can capture excess kurtosis well but has infinite variance which conflicts with finance theory.\n  \nScale mixture\n  : a combination of a number of normals.\n\n\n# Visual explorations\n\n## Rethinking time plots\n\n* One **limitation** with time plots is that the simple passage of time is not a good explanatory variable.\n* There are occasional exceptions where there is a clear mechanism driving the financial time series.\n\n>Descriptive chronology is not causal explanation - Edward Tufte ( 2015) *The visual display of quantitative information* P37\n\n## Time plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglen_m %>% ggplot(aes(x=date,y=log_return)) + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n\n## Seasonal plots\n\n::: {.cell}\n\n```{.r .cell-code}\nglen_m_ts %>% ggseasonplot(year.labels=TRUE,\n                           year.labels.left=TRUE) + \n  ylab(\"\") +\n  ggtitle(\"Seasonal plot: Glencore returns\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n## Inference from the plot\n\n* Data plotted against the individual \"seasons\" in which the data were observed.  (In this case a \"season\" is a month.)\n  * Something like a time plot except that the data from each season are overlapped.\n  * Enables the underlying seasonal pattern to be seen more clearly, and also allows any substantial departures from the seasonal pattern to be easily identified.\n  * In R: `ggseasonplot()`\n\n## Polar plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglen_m_ts %>% ggseasonplot(polar=TRUE) + ylab(\"\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n## Subseries plots {.small}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsubseriesplot(glen_m_ts) + ylab(\"\") +\n  ggtitle(\"Subseries plot: Glencore returns\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n  * Data for each season collected together in time plot as separate time series.\n  * Enables the underlying seasonal pattern to be seen clearly, and changes in seasonality over time to be visualized.\n  * In R: `ggsubseriesplot()`\n\n## Seasonal or cyclic?\n\n#### Time series patterns\n\nTrend\n  : pattern exists when there is a long-term increase or decrease in the data.\n\nSeasonal\n  : pattern exists when a series is influenced by seasonal factors (e.g., the quarter of the year, the month, or day of the week).\n\nCyclic\n  : pattern exists when data exhibit rises and falls that are **not of fixed period** (duration usually of at least 2 years).\n\n\n## Time series components\n\n### Differences between seasonal and cyclic patterns:\n\n* seasonal pattern constant length; cyclic pattern variable length\n* average length of cycle longer than length of seasonal pattern\n* magnitude of cycle more variable than magnitude of seasonal pattern\n\n\n## Time series patterns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts(tsfe::ni_hsales$`Total Verified Sales`,start = c(2005,1),frequency = 4)->ni_hsales_ts\nautoplot(ni_hsales_ts) +\n  ggtitle(\"Northern Ireland Quarter House Sales\") +\n  xlab(\"Year\") + ylab(\"Total Verified Sales\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/NI house sales-1.png){width=960}\n:::\n:::\n\n\n\n## Time series patterns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(carnival_eps_ts) +\n  ggtitle(\"Quarterly EPS for Carnival Plc\") +\n  xlab(\"Year\") + ylab(\"\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/eps-1.png){width=960}\n:::\n:::\n\n\n## Time series patterns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsfe::usuk_rate %>%\n  ggplot(aes(x=date,y=price)) +\n  geom_line(colour=\"darkgreen\") +\n  labs(title=\" Time Plot of GBP:USD\",\n       x=\"\",\n       y=\"Value of £1 in Dollars\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n## Seasonal or cyclic? {.small}\n\n#### Time series patterns\n* seasonal pattern constant length; cyclic pattern variable length\n* average length of cycle longer than length of seasonal pattern\n* magnitude of cycle more variable than magnitude of seasonal pattern\n\n\n> The timing of peaks and troughs is predictable with seasonal data, but unpredictable in the long term with cyclic data.\n\n\n\n## Lag plots and autocorrelation {.small}\n\n::: columns\n::: column\n\n### Example: Earnings per share\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngglagplot(tsfe::carnival_eps_ts)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n:::\n::: column\n### Lagged scatterplots\n\n* Each plot shows $y_t$ plotted against $y_{t-k}$ for\ndifferent values of $k$.\n* The autocorrelations are the correlations associated\nwith these scatterplots.\n\n:::\n:::\n\n## Autocorrelation {.small}\n\n- One of the most important data properties that financial time series models exploits\n\n- **Covariance** and **correlation**: measure extent of **linear relationship** between two variables ($y$ and $X$).\n\n- **Autocovariance** and **autocorrelation**: measure linear relationship between **lagged values** of a time series $y$.\n\n- We measure the relationship between:\n\n* $y_{t}$ and $y_{t-1}$\n* $y_{t}$ and $y_{t-2}$\n* $y_{t}$ and $y_{t-3}$\n* etc.\n\n\n## Autocorrelation {.small}\n\n- We denote the sample autocovariance at lag $k$ by $c_k$ and the sample autocorrelation at lag $k$ by $r_k$.  Then define\n\n$$c_k = \\frac{1}{T}\\sum_{t=k+1}^T (y_t-\\bar{y})(y_{t-k}-\\bar{y})$$ \n\nwhere $\\bar{y}$ is the sample mean of the $y_t$.\n\n$$r_{k} = c_k/c_0$$\n\n* $r_1$ indicates how successive values of  $y$  relate to each other\n* $r_2$ indicates how  $y$ values two periods apart relate to each other\n* $r_k$ is *almost* the same as the sample correlation between $y_t$ and $y_{t-k}$.\n\n\n\n## Autocorrelation\n\nResults for first 9 lags for Carnival earnings data:\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| $r_1$ | $r_2$  | $r_3$ | $r_4$ | $r_5$ | $r_6$  | $r_7$ | $r_8$ | $r_9$  |\n|:-----:|:------:|:-----:|:-----:|:-----:|:------:|:-----:|:-----:|:------:|\n| 0.103 | -0.109 | 0.069 | 0.839 | 0.051 | -0.143 | 0.016 | 0.707 | -0.021 |\n\n\n:::\n:::\n\n\n## Autocorrelation Function (ACF) plot {.small}\n\nResults for first 9 lags for Carnival earnings data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggAcf(tsfe::carnival_eps_ts)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/epsacf-1.png){width=960}\n:::\n:::\n\n\n\n\n## Autocorrelation inference {.small}\n\n- $r_{1}$ is positive and high, indicating that successive values of the series are positively correlated.\n* $r_{4}$  higher than for the other lags. This is due to **the seasonal pattern in the data**: the peaks tend to be **4 quarters** apart and the troughs tend to be **2 quarters** apart.\n* $r_2$ is more negative than for the other lags because troughs tend to be 2 quarters behind peaks.\n* Together, the autocorrelations at lags 1, 2, $\\dots$, make up the **autocorrelation** or ACF.\n* The plot is known as a **correlogram**\n\n\n\n## ACF plots Trend and seasonality\n- When data have a trend, the autocorrelations for small lags tend to be large and positive.\n- When data are seasonal, the autocorrelations will be larger at the seasonal lags (i.e., at multiples of the seasonal frequency)\n- When data are trended and seasonal, you see a combination of these effects.\n\n## Any trends?\n\n::: {.cell}\n\n```{.r2 .cell-code}\nautoplot(carnival_eps_ts)\n```\n:::\n\n## Any autcorrelation?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggAcf(carnival_eps_ts)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-26-1.png){width=960}\n:::\n:::\n\n\n## Discussion {.discussion}\n\n- Time plot shows clear trend and seasonality.\n\n- The same features are reflected in the ACF.\n\n  * The slowly decaying ACF indicates trend.\n  * The ACF peaks at lags 4, 8, 12, 16, 20, $\\dots$, indicate seasonality of length 4.\n\n## Your turn\n\n* use `tq_get()` to download GLEN.L stock price from yahoo finance\n* using this series create a time series object hint **use frequency=1**\n* Explore this time series for trends and autocorrelation\n\n\n## Signal and the noise {.small}\n\n- On important stylised fact of financial time series data is a low $\\frac{Signal}{Noise}$ ratio, which changes over time (is dynamic).\n- The signal is the *sense* you want your model to capture and predict, the noise is the *nonsense* you do not want your model to capture as it is unpredictable.\n\n>Noise makes trading in financial markets possible, and thus allows us to observe prices in financial assets. [But] noise also causes markets to be somewhat inefficient…. . Most generally, noise makes it very difficult to test either practical or academic theories about the way that financial or economic markets work. We are forced to act largely in the dark\nFisher Black, Noise, Journal of Finance ,41 ,3 (1986) (p.529)\n\n\n## Example: White noise\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1222)\nwn <- ts(rnorm(36))\nautoplot(wn)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n\n\n\n## Example: White noise\n\n\n::: {.cell result='asis'}\n::: {.cell-output-display}\n\n\n| $r_{1}$ | $r_{2}$ | $r_{3}$ | $r_{4}$ | $r_{5}$ | $r_{6}$ | $r_{7}$ | $r_{8}$ | $r_{9}$ | $r_{10}$ |\n|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|:-------:|:--------:|\n|  0.132  | -0.032  |  0.074  | -0.098  |  0.043  |  0.339  |  0.151  |  0.097  | -0.102  |  -0.073  |\n\n\n:::\n:::\n\n- Sample autocorrelations for white noise series\n\n- We expect each autocorrelation to be close to zero.\n\n\n## Sampling distribution of autocorrelations\n\nSampling distribution of $r_k$ for white noise data is asymptotically N(0,$1/T$).\n\n* 95% of all $r_k$ for white noise must lie within $\\pm 1.96/\\sqrt{T}$.\n* If this is not the case, the series is probably not WN.\n* Common to plot lines at $\\pm 1.96/\\sqrt{T}$ when plotting ACF.\n\n\n## Your turn\n\n- You can compute the daily changes in the Google stock price using\n```r\ndgoog <- diff(goog)\n```\n- Does `dgoog` look like white noise?\n\n\n## Financial Data Forecastability\n\n  - Predictability of an event or quantity depends on several factors\n  1. How well we understand the factors that contribute to it\n  2. How much data are available\n  3. Whether the forecast can affect the thing we are trying to forecast\n\n## Prediction and EMH {.small}\n  - Crudely, the efficent market hypothesis (EMH) implies that returns from speculative assets are *unforecastable*\n  - The overpowering logic of the EMH is:\n    - **If returns are forecastable,there should exist a money machine producing unlimited wealth**\n- Based on the random walk theory change in price are defined as white noise as follows:\n\\begin{align*}\np_t=p_{t-1} + a_t \\\\\np_t-p_{t-1} = a_t \\\\\n\\text{where}\n\\end{align*}\n\n## Prediction and EMH {.small}\n\n  - High quality models identify the signal from the noise in financial data.\n  - The **signal** is the regular pattern that is likely to repeat.\n  - The **noise** is the irregular pattern which occurrs by chance and unlikely to repeat.\n  - Overfitting or data snooping can result in your model capturing both **signal** and **noise**.\n  - Overfitted models usually produce poor predictions and inferences.\n\n\n# Time Series Modelling\n\n## Time Series Modelling\n- Financial time series data often exhibit patterns, trends, and fluctuations\n- Appropriate modelling and processing techniques are required to extract meaningful insights\n- Two commonly used approaches:\n  - ARIMA (Autoregressive Integrated Moving Average) modelling\n  - Smoothing techniques\n\n## ARIMA Modelling\n\n- Class of statistical models widely used for time series forecasting and analysis\n- Combines autoregressive (AR) and moving average (MA) components\n- Handles non-stationarity through differencing\n\n## Key Aspects of ARIMA Modelling {.small}\n\n::: incremental\n1. Stationarity\n   - Assumes time series is stationary (constant mean, variance, and autocorrelation)\n   - Differencing is applied to achieve stationarity if data is non-stationary\n\n2. Autocorrelation\n   - Captures the data's autocorrelation structure\n   - Future values are influenced by past values and/or past errors\n\n3. Model Identification\n   - Specified by three parameters: p (AR order), d (differencing degree), q (MA order)\n   - Determined through iterative model identification, estimation, and diagnostic checking\n\n4. Forecasting\n   - Generates forecasts for future periods once an appropriate ARIMA model is identified and estimated\n:::\n\n## Suitability of ARIMA Models\n\n- Capturing underlying patterns and dynamics of time series data\n- Handling trends, seasonality, and autocorrelation structures\n- Widely used in finance for forecasting stock prices, exchange rates, and economic indicators\n\n## Smoothing Techniques\n\n- Reduce noise or irregularities in time series data\n- Reveal the underlying trend or signal\n- Apply filters or weighted averages to smooth out fluctuations\n- Do not explicitly model the autocorrelation structure\n\n## Standard Smoothing Techniques\n\n1. Moving Averages (Simple, Exponential, Weighted)\n2. Savitzky-Golay Filter\n3. Lowess (Locally Weighted Scatterplot Smoothing)\n4. Kalman Filter\n\n## Suitability of Smoothing Techniques\n\n- Extracting the underlying trend or signal from noisy data\n- Preprocessing step before further analysis or visualization\n- Focus on denoising the data and revealing the underlying trend or signal\n\n## Choosing the Right Approach\n\n- Depends on the specific objectives and characteristics of the financial time series data\n- ARIMA models:\n  - Forecasting future values\n  - Accounting for autocorrelation and capturing underlying patterns\n- Smoothing techniques:\n  - Denoising the data and revealing the underlying trend or signal\n\n## Combining Approaches\n\n- ARIMA modelling and smoothing techniques can be combined\n- Used in conjunction with other techniques (decomposition methods, machine learning algorithms)\n- Helps gain deeper insights into financial time series data\n\n## Financial time series smoothing\n\n- Financial time series data often exhibit noise, irregularities, and fluctuations\n- Smoothing techniques help reduce random variations and reveal underlying trends\n- This presentation explores various smoothing methods used in financial time series analysis\n\n## some data {visibility='hidden'}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(quantmod)\nlibrary(TTR)\nlibrary(ggplot2)\nlibrary(dlm)\nlibrary(signal)\nlibrary(stats)\n\n# Retrieve historical stock data for Apple Inc. (AAPL)\ngetSymbols(\"AAPL\", from = \"2015-01-01\", to = \"2020-12-31\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"AAPL\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract the adjusted closing prices\naapl_prices <- Cl(AAPL)\n```\n:::\n\n\n\n\n## Simple Moving Average (SMA)\n- Basic smoothing technique that calculates the average of a fixed number of data points\n- Formula: $SMA(t) = \\frac{y(t) + y(t-1) + ... + y(t-n+1)}{n}$\n- Widely used in technical analysis for identifying trends and generating trading signals\n- Advantages: Easy to understand and implement, effective for removing high-frequency noise\n- Limitations: Introduces a lag, sensitive to outliers, may distort underlying patterns\n\n## Simple Moving Average (SMA) {.small}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple Moving Average (SMA)\nsma_20 <- SMA(aapl_prices, n = 20)\n# Plot SMA\nggplot() +\n  geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = \"black\") +\n  geom_line(aes(x = index(sma_20), y = as.numeric(sma_20)), color = \"red\") +\n  labs(title = \"Simple Moving Average (SMA)\",\n       x = \"Time\",\n       y = \"Adjusted Close\") +\n  scale_color_manual(name = \"Series\", values = c(\"black\", \"red\"), labels = c(\"Price\", \"SMA\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n## Exponential Moving Average (EMA)\n\n- Assigns exponentially decreasing weights to older data points\n- Formula: $EMA(t) = \\alpha \\times y(t) + (1 - \\alpha) \\times EMA(t-1)$\n- Commonly used in technical analysis, forecasting, and signal processing\n- Advantages: Responds quickly to changes, less lag than SMA, less sensitive to outliers\n- Limitations: Requires tuning the smoothing parameter ($\\alpha$)\n\n## Exponential Moving Average (EMA) {.small}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exponential Moving Average (EMA)\nema_20 <- EMA(aapl_prices, n = 20)\nggplot() +\n  geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = \"black\") +\n  geom_line(aes(x = index(ema_20), y = as.numeric(ema_20)), color = \"blue\") +\n  labs(title = \"Exponential Moving Average (EMA)\",\n       x = \"Time\",\n       y = \"Adjusted Close\") +\n  scale_color_manual(name = \"Series\", values = c(\"black\", \"blue\"), labels = c(\"Price\", \"EMA\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-31-1.png){width=960}\n:::\n:::\n\n\n## Weighted Moving Average (WMA)\n\n- Assigns different weights to data points within the window\n- Formula: $WMA(t) = \\frac{w_1 \\times y(t) + w_2 \\times y(t-1) + ... + w_n \\times y(t-n+1)}{w_1 + w_2 + ... + w_n}$\n- Used in technical analysis, signal processing, and trend analysis\n- Advantages: Allows for customized weighting schemes, can better capture underlying patterns\n- Limitations: Requires careful selection of weights, inappropriate weights can distort the series\n\n## Weighted Moving Average (WMA) {.small}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwma_custom <- WMA(aapl_prices, n = 5, wts = c(0.1, 0.2, 0.3, 0.2, 0.2))\nggplot() +\n  geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = \"black\") +\n  geom_line(aes(x = index(wma_custom), y = as.numeric(wma_custom)), color = \"green\") +\n  labs(title = \"Weighted Moving Average (WMA)\",\n       x = \"Time\",\n       y = \"Adjusted Close\") +\n  scale_color_manual(name = \"Series\", values = c(\"black\", \"green\"), labels = c(\"Price\", \"WMA\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-32-1.png){width=960}\n:::\n:::\n\n\n## Savitzky-Golay Filter\n\n- Performs local polynomial regression on a moving window of data points\n- Widely used in signal processing, spectroscopy, and financial time series analysis\n- Advantages: Preserves data features (peaks and valleys), handles noisy data effectively\n- Limitations: Computationally expensive, choice of polynomial order and window size affects results\n\n## Savitzky-Golay Filter {.small}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_filter <- sgolayfilt(aapl_prices, p = 3, n = 21)\n# Plot Savitzky-Golay Filter\nggplot() +\n  geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = \"black\") +\n  geom_line(aes(x = index(aapl_prices), y = as.numeric(sg_filter)), color = \"purple\") +\n  labs(title = \"Savitzky-Golay Filter\",\n       x = \"Time\",\n       y = \"Adjusted Close\") +\n  scale_color_manual(name = \"Series\", values = c(\"black\", \"purple\"), labels = c(\"Price\", \"SG Filter\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-33-1.png){width=960}\n:::\n:::\n\n\n## Lowess (Locally Weighted Scatterplot Smoothing)\n\n- Non-parametric regression technique that fits a low-degree polynomial to localized subsets of data\n- Useful for identifying non-linear trends and patterns in financial time series data\n- Advantages: Effective for handling non-linear relationships, robust to outliers, captures complex patterns\n- Limitations: Computationally intensive, sensitive to the choice of smoothing parameters\n\n## Lowess (Locally Weighted Scatterplot Smoothing) {.small}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lowess Smoothing\nlowess_smooth <- lowess(aapl_prices)\n# Plot Lowess Smoothing\nggplot() +\n  geom_line(aes(x = index(aapl_prices), y = as.numeric(aapl_prices)), color = \"black\") +\n  geom_line(aes(x = index(aapl_prices), y = as.numeric(lowess_smooth$y)), color = \"orange\") +\n  labs(title = \"Lowess Smoothing\",\n       x = \"Time\",\n       y = \"Adjusted Close\") +\n  scale_color_manual(name = \"Series\", values = c(\"black\", \"orange\"), labels = c(\"Price\", \"Lowess\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-34-1.png){width=960}\n:::\n:::\n\n\n## Kalman Filter\n\n- Recursive algorithm that estimates the actual state of a dynamic system from noisy observations\n- Widely used in finance for portfolio optimization, risk management, and forecasting\n- Advantages: Optimal for linear systems with Gaussian noise, handles missing data, provides state estimates and uncertainties\n- Limitations: Assumes linear system model and Gaussian noise, performance degrades for non-linear or non-Gaussian systems\n\n## Kalman Filter {.small}\n\n\n::: {.cell}\n\n:::\n::: {.cell}\n\n```{.r .cell-code}\n# Apply the Kalman filter\ns <- dlmSmooth(aapl_prices, dlmModPoly(1, dV = 15100, dW = 1470))\n\n# Create a data frame for plotting\ndata_df <- data.frame(Date = index(aapl_prices),\n                      Price = as.numeric(aapl_prices),\n                      Kalman = as.numeric(dropFirst(s$s)))\n\n# Plot the results using ggplot\ndata_df |> \n  ggplot(aes(x = Date)) +\n  geom_line(aes(y = Price, color = \"Price\")) +\n  geom_line(aes(y = Kalman, color = \"Kalman\")) +\n  labs(title = \"Apple Inc. (AAPL) Stock Prices\",\n       x = \"Time\",\n       y = \"Adjusted Close\") +\n  scale_color_manual(name = \"Series\", values = c(\"Price\" = \"black\", \"Kalman\" = \"blue\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-36-1.png){width=960}\n:::\n:::\n\n\n## Choosing the Right Smoothing Technique\n\n- Depends on the characteristics of the financial time series data\n- Consider the desired smoothing level and specific application or analysis goals\n- Explore multiple smoothing methods and compare their performance\n- Consider the trade-off between smoothing and preserving important features or patterns\n- Excessive smoothing can lead to loss of valuable information\n- Insufficient smoothing may fail to effectively remove unwanted noise\n\n## Combining Smoothing Techniques\n\n- Financial analysts and researchers may combine different smoothing techniques\n- Advanced methods like wavelets or machine learning algorithms can be used\n- Helps extract meaningful insights from complex financial time series data\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"index_files/libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"index_files/libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"index_files/libs/datatables-binding-0.31/datatables.js\"></script>\n<script src=\"index_files/libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"index_files/libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"index_files/libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"index_files/libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"index_files/libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"index_files/libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}